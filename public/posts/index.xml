<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MrSheepSheep&#39;s curiosities</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on MrSheepSheep&#39;s curiosities</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Jun 2025 00:00:00 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abusing Cloud Identity Providers for Phishing</title>
      <link>http://localhost:1313/posts/idp-passthrough-phishing/</link>
      <pubDate>Tue, 03 Jun 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/idp-passthrough-phishing/</guid>
      <description>Many Cloud identity providers offer the ability to delegate authentication to an external identity providers. This is known as Federated authentication.&#xA;This post focuses on providers that offer Federated passthrough authentication to on-premise directories such as Active Directory or LDAP.&#xA;If implemented incorrectly on the provider&amp;rsquo;s side, on-premise passthrough authentication can be abused by threat actors to perform phishing attacks from the provider&amp;rsquo;s login page directly, under the attacker&amp;rsquo;s tenant / organization page.</description>
    </item>
    <item>
      <title>Exploiting the Docker daemon from an XSS perspective</title>
      <link>http://localhost:1313/posts/docker-xss-rce/</link>
      <pubDate>Thu, 02 Jan 2025 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/docker-xss-rce/</guid>
      <description>Finding the right API endpoint To exploit any API endpoint from an XSS, we first need to fight CORS restrictions. Sadly for us, Docker does not return any CORS headers.&#xA;This means we should only be able to hit the docker API using GET and POST requests sent straight from an HTML form.&#xA;Looking at the Docker API documentation, pretty much all endpoints require a Content-Type: application/json header to be valid.</description>
    </item>
    <item>
      <title>Advanced Microsoft Phishing with a QuickAssist XSS</title>
      <link>http://localhost:1313/posts/quickassist-phishing/</link>
      <pubDate>Thu, 14 Nov 2024 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/quickassist-phishing/</guid>
      <description>Earlier this year, Microsoft published an blog about TA Storm-1811 using Quick Assist to conduct targeted social engineering attacks and deploy Black Basta ransomware.&#xA;https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/&#xA;The full attack scenario is quite long, but could have been easier to execute a few months earlier.&#xA;Indeed, in October 2023, during redteam research, I discovered and reported a cross-site-scripting vulnerability in QuickAssist that could allow an attacker to bypass consent prompts in QuickAssist andtake full control over the computer without approval from the victim.</description>
    </item>
    <item>
      <title>Exploiting Azure Data Factory to reach on-premise assets</title>
      <link>http://localhost:1313/posts/azure-data-factory/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/azure-data-factory/</guid>
      <description>In 2022, my team at Formind conducted a security assessment for a business using Azure Data Factory. The scope was a resource group related to data pipelines run daily by the company and updated by multiple collaborators.&#xA;Apart from regular security misconfigurations in the RBAC permissions for the resources inside the group, we found out that we were able to fully compromise the internal network of the company straight from Azure Data Factory, using undocumented features and taking advantage of the lack of security guidelines from Microsoft.</description>
    </item>
    <item>
      <title>Scrapping codesandbox.io for Discord bot tokens</title>
      <link>http://localhost:1313/posts/discord-codesandbox/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0100</pubDate>
      <guid>http://localhost:1313/posts/discord-codesandbox/</guid>
      <description>The number one security rule you should follow when developing on publicly available platforms is to never expose application secrets.&#xA;The most widely known website where sensitive data exposure happens is Github. You can experience this by yourself pretty easily, actually. This kind of leakage happens quite regularly : it’s potentially one of the reasons the SolarWinds hack occured a few weeks ago !&#xA;But I’m not here to talk about Github scraping.</description>
    </item>
  </channel>
</rss>
